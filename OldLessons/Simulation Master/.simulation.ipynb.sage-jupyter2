{"backend_state":"running","kernel":"ir-sage","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":64024576},"trust":true,"type":"settings"}
{"cell_type":"markdown","id":"001f2b","input":"\n### What would be a big streak for Kobe?\n\nWe again come back to Kobe, a player we know makes 45% percent of his shots. Kobe took about 26500 shots in his career. What would be a reasonable longest shooting streak for a player like that?\n\n\n**Run a simulation of Kobe's career and see what the longest streak was? Then do it again. Did you get a different answer? Do it a few times. How much variability is there in the answer?**","pos":38,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1856f9","input":"We can generate random numbers using a variety of functions and distributions. \n\nThe first kind of randomness that people understand is uniform randomness. This is where everything is equally likely. We generate randomness like this with ```runif(min, max)```.\n\n```\nlibrary(dplyr)\nlibrary(ggplot2)\nrunif(n=10, min=0, max=1)\n```","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1c8fdc","input":"# Num of hits\n\nWe can calculate the number of hits by ```sum(table$hit)```","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1f7afb","input":"## Simulated Kobe\n\nKobe was about 45% shooter. So we want to imagine a shooter that isn't streaky at all that just works the way randomness says the situation should work. Check out the code below.","pos":23,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"284518","input":"This creates a list of hits and misses with the same expected proportions as a typical Kobe Bryant after 133 shots.\n","pos":27,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3939ce","input":"Now let's save some random numbers and make a table.","pos":1.75,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"402e56","input":"## Evaluating streakiness\n\nAre players streaky? Or is it just the whims of fate. Let's look at some data and compare it to what we see if the world was just mathematically random.\n","pos":14.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5dc7c9","input":"**Describe Kobe Bryants streak distribution.**","pos":21,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6f3801","input":"Now ```shot_outcomes``` is a list of two outcomes H and M for hit and miss. \n\nWe now ```sample``` from this list the same number of times that Kobe shot in his game, 133. \n\nHere we use the ```sample``` function this allows us to imagine picking from a list over and over. There are various options to the command as well, as you will see.","pos":25,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"95aee2","input":"# Simulation in R\n\nIn this document we will explore ways to run simulations with R, and use some random number generators.\n","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ac28b9","input":"**Warning: Don't wory about the next line. It is a function that we need to determine how streaky Kobe is.**","pos":16.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b6e029","input":"## Seeds and random number generators\n\nComputers don't actually create randomness. They actually use complicated algorithms that produce a determined number. These numbers just look random to use. We can make all the computers in this room come up with the same random numbers by setting the *seed* on the computers to be the same. \n\n```\nset.seed(13)\nrunif(n=10, min=0, max=1)\n```\n\nCompare your numbers to another classmates.","pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"bc00f0","input":"## Simulating stock market\n\nStock returns are much more likely to follow the normal model than a uniform model. A fictional stock has the following properties: On average it gains 1.001 times its opening price during the trading day, but that can vary by a standard deviation of 0.005 on any given day (this is its volatility). We can simulate a single sample path for this stock by taking the cumulative product from a Normal distribution with a mean of 1.001 and a sd of 0.005. Assuming the stock opens at $20/per share, here is a sample path for 365 days of trading.\n\n","pos":32,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"bdfcdf","input":"**What does this say about Kobe being a streaky shooter?**","pos":31,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f8f829","input":"## How to use random numbers\n\nWe might be trying to simualate a batter in a baseball game. Maybe we are trying to simulate Mike Trout. He is one of the best hitter in baseball today. His batting average is 0.312. So we could say that he gets a hit if the random number is less than .312. This is easily done with the ```mutate``` command.\n\n```\ntable <- table %>%\nmutate(hit = ifelse(samp < .312, 1, 0))\nhead(table)\n```","pos":7,"state":"done","type":"cell"}
{"end":1550036024312,"id":"04d2ef","input":"table<-data.frame(cbind(num, samp))","kernel":"ir-sage","pos":4,"start":1550036024273,"state":"done","type":"cell"}
{"end":1550036026499,"id":"af4737","input":"summary(table)","kernel":"ir-sage","pos":6,"start":1550036026474,"state":"done","type":"cell"}
{"end":1550036027800,"id":"c24912","input":"table <- table %>%\nmutate(hit = ifelse(samp < .312, 1, 0))\nhead(table)","kernel":"ir-sage","pos":8,"start":1550036027724,"state":"done","type":"cell"}
{"end":1550036029501,"id":"c6ce03","input":"sum(table$hit)\n","kernel":"ir-sage","pos":10,"start":1550036029386,"state":"done","type":"cell"}
{"end":1550036034190,"id":"ed12f6","input":"set.seed(13)\nrunif(n=10, min=0, max=1)","kernel":"ir-sage","pos":13,"start":1550036034152,"state":"done","type":"cell"}
{"end":1550036036095,"id":"860124","input":"set.seed(13)\nrunif(n=10, min=0, max=1)","kernel":"ir-sage","pos":14,"start":1550036036070,"state":"done","type":"cell"}
{"end":1550036710795,"id":"0931b4","input":"calc_streak = function(x)\n{\n    if (!is.atomic(x))\n        x = x[,1]\n\n    if (any(!x %in% c(\"H\",\"M\")))\n        stop('Input should only contain hits (\"H\") and misses (\"M\")')\n    \n    y = rep(0,length(x))\n    y[x == \"H\"] = 1\n    y = c(0, y, 0)\n    wz = which(y == 0)\n    streak = diff(wz) - 1\n    \n    return(data.frame(length = streak))\n}","kernel":"ir-sage","pos":17,"start":1550036710704,"state":"done","type":"cell"}
{"end":1550037164666,"id":"0a18e0","input":"dim(kobe_basket)","kernel":"ir-sage","pos":18,"start":1550037164644,"state":"done","type":"cell"}
{"end":1550037195193,"id":"336636","input":"kobe_streak <- calc_streak(kobe_basket$shot)\nIQR(kobe_streak$length)","kernel":"ir-sage","pos":19,"start":1550037195152,"state":"done","type":"cell"}
{"end":1550037208340,"id":"df2ca6","input":"ggplot(data = kobe_streak, aes(x = length)) +\n  geom_histogram(binwidth = 1)","kernel":"ir-sage","pos":20,"start":1550037206438,"state":"done","type":"cell"}
{"end":1550037372628,"id":"fe684e","input":"shot_outcomes <- c(\"H\", \"M\")","kernel":"ir-sage","pos":24,"start":1550037372595,"state":"done","type":"cell"}
{"end":1550037601704,"id":"821298","input":"sim_basket <- sample(shot_outcomes, size = 133, replace = TRUE, prob=c(0.45, 0.55))\nsim_basket","kernel":"ir-sage","pos":26,"start":1550037601673,"state":"done","type":"cell"}
{"end":1550037604633,"id":"eb2be3","input":"\nsim_streak = calc_streak(sim_basket)\nggplot(data = sim_streak, aes(x=length)) +\n  geom_histogram(binwidth = 1)","kernel":"ir-sage","pos":28,"start":1550037604212,"state":"done","type":"cell"}
{"end":1550037697520,"id":"fe9fe9","input":"IQR(sim_streak$length)","kernel":"ir-sage","pos":29,"start":1550037697465,"state":"done","type":"cell"}
{"end":1550037706138,"id":"5f6ef4","input":"streaks = c(kobe_streak,sim_streak)\nboxplot(streaks)","kernel":"ir-sage","pos":30,"start":1550037706074,"state":"done","type":"cell"}
{"end":1550038729327,"id":"5c2277","input":"days <- 365\nchanges <- rnorm(365,mean=1.001,sd=0.005)\nplot(cumprod(c(20,changes)),type='l',ylab=\"Price\",xlab=\"day\",main=\"closing price (1 possible path)\")","kernel":"ir-sage","pos":33,"start":1550038729177,"state":"done","type":"cell"}
{"end":1550038763119,"id":"531d16","input":"runs <- 100000\n#simulates future movements and returns the closing price on day 365\ngenerate.path <- function(){\n  days <- 365\n  changes <- rnorm(365,mean=1.001,sd=0.005)\n  sample.path <- cumprod(c(20,changes))\n  closing.price <- sample.path[days+1] #+1 because we add the opening price\n}\n\nmc.closing <- replicate(runs,generate.path())","kernel":"ir-sage","pos":34,"start":1550038758477,"state":"done","type":"cell"}
{"end":1550039058904,"id":"2a3fb6","input":"head(mc.closing)","kernel":"ir-sage","pos":35,"scrolled":true,"start":1550039058877,"state":"done","type":"cell"}
{"end":1550039117764,"id":"a6a128","input":"mean(mc.closing)","kernel":"ir-sage","pos":36,"start":1550039117731,"state":"done","type":"cell"}
{"end":1550039138918,"id":"73b5b5","input":"quantile(mc.closing, c(.05, .5, .95))","kernel":"ir-sage","pos":37,"start":1550039138874,"state":"done","type":"cell"}
{"end":1550065325675,"id":"d6872e","input":"load(file=\"kobe_basket.rda\")","kernel":"ir-sage","pos":15,"start":1550065324987,"state":"done","type":"cell"}
{"end":1550065327077,"id":"00e8a5","input":"kobe_basket","kernel":"ir-sage","pos":16,"scrolled":true,"start":1550065326873,"state":"done","type":"cell"}
{"id":"1bf39c","input":"num<-c(1:1000000)","kernel":"ir-sage","pos":3,"state":"done","type":"cell"}
{"id":"27165a","input":"samp<-runif(n=1000000, min=0, max=1)","kernel":"ir-sage","pos":2,"state":"done","type":"cell"}
{"id":"5ee35e","input":"","pos":41,"type":"cell"}
{"id":"641fb7","input":"library(dplyr)\nlibrary(ggplot2)\nrunif(n=10, min=0, max=1)","pos":1.5,"state":"done","type":"cell"}
{"id":"7aa824","input":"head(table)","kernel":"ir-sage","pos":5,"state":"done","type":"cell"}
{"id":"cc59d1","input":"","pos":22,"state":"done","type":"cell"}
{"id":"eb7a04","input":"","pos":40,"state":"done","type":"cell"}
{"id":0,"time":1550065031560,"type":"user"}
{"last_load":1550030715172,"type":"file"}